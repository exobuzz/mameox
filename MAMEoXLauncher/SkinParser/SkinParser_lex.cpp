#define yy_create_buffer sp_create_buffer
#define yy_delete_buffer sp_delete_buffer
#define yy_scan_buffer sp_scan_buffer
#define yy_scan_string sp_scan_string
#define yy_scan_bytes sp_scan_bytes
#define yy_flex_debug sp_flex_debug
#define yy_init_buffer sp_init_buffer
#define yy_flush_buffer sp_flush_buffer
#define yy_load_buffer_state sp_load_buffer_state
#define yy_switch_to_buffer sp_switch_to_buffer
#define yyin spin
#define yyleng spleng
#define yylex splex
#define yyout spout
#define yyrestart sprestart
#define yytext sptext
#define yywrap spwrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 98
#define YY_END_OF_BUFFER 99
static yyconst short int yy_accept[867] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   99,   94,
        3,   98,   94,   93,   94,   88,   88,   91,   91,   88,
       94,   88,   89,   89,   98,   98,   98,   97,   98,   98,
        3,   88,    0,   91,    0,    0,    0,   91,    0,    0,
        0,    0,   92,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   89,    0,   89,
       89,   89,   89,    0,    0,    0,    0,   97,    0,    0,
        0,    0,   87,    0,    0,    0,   87,   87,    0,   92,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   59,    0,   61,   87,    0,   87,   89,    0,   95,
        0,    0,   87,    0,   87,    0,    1,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   60,    0,   62,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   16,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   87,   87,   89,   87,
       89,    0,    0,   87,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   45,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   22,    0,    0,    0,   87,   87,    0,
       90,    0,   87,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   46,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   23,    0,    0,    0,    0,   18,
        0,   51,    0,    0,   49,    0,    0,    0,    0,    0,
        0,   34,    0,    0,    0,    0,   53,    0,   20,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   63,    0,
        4,    0,    0,    0,    0,   32,    0,    0,    0,    0,
        0,   87,   87,   87,   87,   90,    0,   87,    0,    0,

       19,    0,   52,    0,    0,   50,    0,    0,    0,    0,
        0,   35,    0,    0,    0,    0,   54,    0,   21,    0,
        0,    0,    0,    0,    0,    0,    0,   64,    0,    5,
        0,    0,    0,    0,   33,    0,    0,    0,    0,   43,
        0,    0,    0,    0,    0,   36,    0,    0,    0,    0,
       47,    0,    0,    0,    0,    0,    0,    0,    0,   24,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   65,
       87,   87,   87,   87,   87,   87,    0,    0,   44,    0,
        0,    0,    0,   37,    0,    0,    0,    0,   48,    0,
        0,    0,    0,    0,    0,    0,   25,    0,    0,    0,

        0,    0,    0,    0,    0,   66,    0,    0,    0,   26,
        0,    0,    0,    0,    0,    0,   67,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   38,    0,
        0,    0,   87,    0,   87,   87,   87,   87,   87,    0,
        0,    0,    0,   27,    0,    0,    0,    0,   68,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   39,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   87,   87,   87,   87,   87,   87,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   28,    0,    0,
        0,    0,    0,   30,    0,    0,    0,    2,    0,    0,
       57,    0,   14,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   87,   87,   87,   87,   87,   87,    0,    0,
        0,   29,    0,    0,    0,   31,    0,    0,    0,    0,
       58,    0,   15,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   69,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   81,    0,   55,    0,
        0,    0,    0,   96,    0,    0,    0,   70,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   82,    0,   56,

        0,    0,    0,    0,    0,    0,   71,    0,    0,    0,
        0,    0,    0,    0,    0,   42,    0,    0,    0,    0,
       72,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   85,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       86,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    8,    0,    0,   77,    0,    0,    0,    0,    0,
        0,    0,    9,    0,    0,   78,    0,    0,    0,    0,
        0,    0,   79,    0,   73,    0,    0,   75,    0,    0,
        0,    0,   80,    0,   74,    0,    0,   76,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   83,    0,    0,    0,    0,
       84,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   40,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   41,
        0,    0,    6,    0,    0,    0,    7,    0,   12,    0,
       10,    0,   13,    0,   11,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    1,    1,    1,    1,
        1,    7,    8,    1,    9,   10,   11,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    1,    1,   14,
       15,   16,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       27,   34,   35,   36,   37,   38,   39,   40,   41,   42,
        1,    1,    1,    1,   17,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   27,   34,   35,   36,   37,   38,   39,   40,
       41,   42,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[43] =
    {   0,
        1,    2,    3,    4,    1,    5,    4,    4,    6,    7,
        4,    8,    8,    4,    9,    4,    6,   10,   10,   10,
       10,   10,   10,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11
    } ;

static yyconst short int yy_base[895] =
    {   0,
        0,    0,   40,   41,   42,   43,   48,   49, 1711, 1712,
     1708, 1712, 1694, 1712,    0, 1712,   41,   62, 1668,  101,
     1692, 1691,  141,   46, 1696, 1695, 1698, 1697, 1687,   77,
     1698, 1712, 1693,   45,  182, 1683,  197, 1657,  219, 1681,
        0,   55, 1712,    0,   57, 1686,  225,   31,   68,   67,
     1672, 1661, 1658, 1669,   72, 1668, 1667, 1655, 1655,   72,
       81,   74, 1655, 1659, 1658,  113,  116,  265,    0,    0,
      101,  137,  178, 1674, 1673,  176, 1676, 1675, 1665,  193,
      200,  114,    0, 1672, 1662,    0,  188,  299, 1667,    0,
     1666,   79,  194, 1642, 1651, 1640, 1637, 1648,  185, 1647,

     1646, 1634, 1634,  230,  303,  247, 1639, 1638,  206,  211,
     1630,  206, 1642, 1624, 1624, 1628,  204, 1635, 1626, 1634,
      244, 1623,  308, 1631,  278, 1617, 1617,  295, 1627, 1620,
     1615, 1606, 1621, 1617,  291, 1605, 1611, 1624, 1608, 1620,
      324, 1712,  325, 1712,  333,    0,  348,  323,    0, 1631,
      254, 1633,    0,  220,  363, 1629, 1712, 1604,  313, 1616,
     1598, 1598,  318, 1610, 1601, 1609,  333, 1598,  332, 1606,
     1593, 1591, 1591,  329, 1601, 1594, 1589, 1580, 1595, 1591,
      310, 1579, 1585, 1583, 1595,  361, 1712,  363, 1712, 1590,
     1596, 1594, 1584, 1589, 1574, 1573, 1576, 1586, 1588, 1569,

     1582, 1579, 1569, 1570,  371, 1712, 1564, 1564, 1580, 1571,
     1570,  372, 1563, 1569, 1564, 1570, 1569, 1559, 1571, 1554,
     1561, 1550,  376, 1553, 1548, 1547,  377,  391,  387,  399,
      404,    0,  380, 1712, 1576,    0, 1556, 1562, 1560, 1550,
     1555, 1540, 1543, 1553, 1555, 1536, 1549, 1546, 1536, 1537,
      399, 1712, 1531, 1531, 1539, 1538,  408, 1531, 1537, 1532,
     1538, 1537, 1527, 1539, 1522, 1529, 1518,  421, 1517, 1516,
     1533,  423,  424, 1529,  425, 1517, 1526, 1513, 1520, 1508,
      426, 1513, 1518, 1507,  427,  428, 1523, 1519, 1507, 1502,
      429, 1712, 1500, 1500, 1509, 1512,  430,  431, 1498, 1496,

     1500,  432,  433, 1712, 1493, 1492, 1503,  468,  509,    0,
        0,  436,    0, 1509,  436,  449, 1505,  451, 1493, 1490,
     1497, 1485,  455, 1490, 1495, 1484,  457,  462, 1500, 1485,
     1480,  510, 1712, 1478, 1478, 1487, 1490,  512,  513, 1476,
     1474, 1478,  517,  519, 1712, 1471, 1482,  520,  525, 1712,
      528, 1712, 1472,  529, 1712, 1475, 1470,  530, 1467, 1473,
      532, 1712,  535, 1465, 1480,  536, 1712,  537, 1712, 1475,
     1480, 1466, 1470, 1461,  540, 1459, 1462,  541, 1712,  545,
     1712, 1467, 1461, 1466,  547, 1712, 1455, 1457, 1469,  553,
      568,  573,  595,  626,  648, 1712,  441,    0,  558,  557,

     1712,  564, 1712, 1452,  565, 1712, 1455,  585, 1448, 1454,
      638, 1712,  649, 1446, 1461,  651, 1712,  656, 1712, 1456,
     1448, 1452, 1443,  658, 1441, 1444,  659, 1712,  664, 1712,
     1449, 1443, 1448,  666, 1712, 1437, 1452,  667,  668, 1712,
     1444, 1436,  669,  366,  671, 1712, 1442, 1440, 1429,  674,
     1712,  675, 1430, 1441, 1426, 1426, 1428, 1439,  676, 1712,
     1422, 1422, 1421, 1433,  677, 1432, 1432, 1423,  679, 1712,
      448,  694,    0,    0,  735,  776,  544,  777, 1712, 1426,
     1418,  779,  780, 1712, 1424, 1422, 1411,  784, 1712,  786,
     1412, 1423, 1409, 1411, 1422,  787, 1712, 1405, 1405, 1404,

     1416,  792, 1415, 1407,  795, 1712, 1417, 1401,  796, 1712,
     1401, 1410, 1413, 1398, 1394,  797, 1712, 1406, 1392, 1408,
     1390, 1393, 1401, 1387, 1403, 1400, 1388,  799, 1712, 1392,
     1395, 1388,  552,  814,    0,    0,  826,  848,  879,  422,
     1397, 1381,  802, 1712, 1395, 1380, 1376,  803, 1712, 1388,
     1374, 1373, 1376, 1384, 1370, 1386, 1383, 1371,  805, 1712,
     1375, 1372, 1368,  807, 1364, 1363, 1365, 1364,  808, 1372,
     1373,  812, 1372,  815,  891, 1371, 1352, 1355, 1351, 1366,
     1365, 1363,  906, 1375,  576,  928,    0,    0,  840, 1352,
      892, 1351, 1350,  893, 1358, 1359, 1358,  894,  969, 1357,

     1338, 1341, 1337, 1352, 1350, 1340,  901, 1712, 1344, 1333,
     1337,  904,  970, 1712, 1336, 1332,  971, 1712, 1331,  972,
     1712,  973, 1712, 1342, 1337, 1328, 1339, 1338,  975,  977,
      686, 1318,  447,  985, 1349,  629,    0,    0,  997, 1326,
      979, 1712, 1325,  980,  998, 1712, 1324, 1320, 1319,  999,
     1712, 1000, 1712, 1330, 1325, 1316, 1327, 1326, 1007, 1008,
     1306, 1324, 1303, 1318, 1321, 1010, 1712, 1015, 1320, 1319,
     1317, 1310, 1316, 1303, 1314, 1016, 1712, 1017, 1712,  840,
     1018, 1316, 1023, 1320, 1311, 1310, 1019, 1712, 1020, 1309,
     1308, 1306, 1299, 1305, 1292, 1301, 1025, 1712, 1026, 1712,

     1302, 1286, 1282, 1292, 1282, 1027, 1712, 1283, 1281, 1275,
     1275, 1273, 1028, 1260, 1036, 1712, 1251, 1248, 1246, 1038,
     1712, 1251, 1247, 1241, 1240, 1236, 1043, 1219, 1216, 1222,
     1208, 1218, 1209, 1199, 1198, 1196, 1044, 1195, 1045, 1712,
     1046, 1204, 1197, 1186, 1167, 1156, 1151, 1047, 1111, 1048,
     1712, 1049, 1123, 1111, 1099, 1105, 1107, 1051, 1053, 1106,
     1054, 1712, 1055, 1056, 1712,  950,  957,  954, 1064, 1066,
      952, 1071, 1712, 1072, 1073, 1712,  942,  909,  915,  894,
      892, 1074, 1712, 1075, 1712,  880, 1076, 1712,  890,  876,
      824, 1077, 1712, 1079, 1712,  807, 1081, 1712,  820,  818,

      801,  784,  800,  780, 1082,  723,  718,  712, 1083,  673,
      670,  902,  663,  657, 1084, 1712,  655,  612,  568, 1092,
     1712,  580,  549,  920, 1094,  553,  537,  450,  448,  349,
      308, 1100, 1099, 1712,  285,  245,  242,  223,  212,  202,
     1101, 1102,  101, 1103,   68,   37, 1104, 1105, 1107, 1712,
     1111, 1112, 1712, 1114, 1115, 1120, 1712, 1122, 1712, 1123,
     1712, 1124, 1712, 1127, 1712, 1712, 1143, 1154, 1165, 1167,
     1173, 1184, 1195, 1206, 1213, 1223, 1227, 1230, 1232, 1236,
     1241, 1243, 1249, 1253, 1260, 1270, 1274, 1276, 1278, 1282,
     1288, 1298, 1308, 1314

    } ;

static yyconst short int yy_def[895] =
    {   0,
      866,    1,  867,  867,  868,  868,  869,  869,  866,  866,
      866,  866,  866,  866,  870,  866,  866,  866,   18,  866,
      866,  866,  866,  871,  872,  872,  873,  873,  874,  874,
      866,  866,  875,  866,  866,  866,  876,   18,  876,  866,
       39,   18,  866,  877,   20,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  878,   23,
      871,  871,  871,  872,  872,  872,  873,  873,  874,  874,
      874,  874,   35,  875,   39,  879,  880,  881,  881,  877,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,

      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  871,  882,  883,  883,  884,  872,
      874,  885,  880,  881,  881,  881,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,

      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  145,  886,  883,  883,
      883,  887,  874,  866,  885,  888,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,

      866,  866,  866,  866,  866,  866,  866,  866,  886,  889,
      890,  874,  891,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
       39,  309,  866,  393,  892,  866,  874,  891,  866,  866,

      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      392,  866,  393,  394,  866,  892,  874,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,

      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  393,  893,  393,  394,  476,  866,  538,  874,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  894,  894,  537,  866,  538,  539,  874,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,

      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  894,  894,  894,  538,  538,  539,  874,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  874,  874,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,

      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,

      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,    0,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866

    } ;

static yyconst short int yy_nxt[1755] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   16,   17,   10,
       16,   18,   19,   20,   21,   22,   10,   23,   23,   23,
       23,   23,   23,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   12,   12,   12,   12,   28,   28,   26,   26,
       12,   12,   34,   34,   73,   69,   34,   34,  855,  111,
      866,   30,   30,   35,  112,   36,   42,   42,   37,   37,
       37,  866,   37,   38,   38,   39,   40,   41,   81,   42,
       42,   42,   42,   42,   42,  113,   43,   82,  116,  854,
       80,  122,  123,  128,  866,  136,  114,  129,  117,  115,

      131,   44,   45,  130,   46,  137,  132,  158,  133,   73,
       69,   47,  159,  134,  141,   32,  135,  143,   48,   49,
       50,   51,  851,   52,   53,   54,   55,   80,  142,   56,
       57,  144,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   35,  151,   36,   73,   69,   37,   37,   68,
       69,   37,   70,   70,   39,   40,   41,   71,   70,   70,
       70,   70,   70,   70,   71,   72,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   35,   76,   36,   73,   69,   37,   37,
       37,  150,   37,  146,   81,   39,   40,   41,   85,   87,

       87,   81,   86,   82,  168,  169,   80,  186,   87,   87,
       82,  160,  188,   80,   88,   88,   88,   88,   88,   88,
       85,  187,  161,  848,   86,  162,  189,  191,  154,  192,
       87,   87,  197,   37,  198,  236,   88,   88,   88,   88,
       88,   88,   92,   93,   94,   95,  847,   96,   97,   98,
       99,  174,  846,  100,  101,  175,  102,  103,  104,  105,
      106,  176,  107,  108,  109,  110,   85,   80,  182,  202,
       86,  845,  203,   73,   69,  233,  145,  145,  183,  844,
      146,   71,  147,  147,  147,  147,  147,  147,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,

      148,  148,  148,  148,  148,  148,  148,  154,  220,  205,
      155,  155,  208,  209,  843,  212,  155,  155,  155,  155,
      155,  155,  177,  206,  221,  141,  143,  265,  178,  213,
      179,  229,   69,  251,  238,  180,  239,  840,  181,  142,
      144,   73,   69,  266,  145,  145,  243,  252,  244,  257,
      227,  227,  227,  227,  227,  227,  229,   69,  248,  230,
      230,  249,  186,  258,  188,  230,  230,  230,  230,  230,
      230,  154,  205,  291,  155,  155,  187,  303,  189,  839,
      155,  155,  155,  155,  155,  155,  206,  292,  227,  227,
      511,  304,   35,   80,   36,  229,   69,   37,   37,  308,

      251,   37,  310,  512,   39,   40,   41,  229,   69,  332,
      230,  230,  229,   69,  252,  312,  230,  230,  230,  230,
      230,  230,  344,  333,  349,  351,  354,  361,  366,  368,
      291,  378,  380,  385,  303,   80,  345,  400,  350,  352,
      355,  362,  367,  369,  292,  379,  381,  386,  304,   80,
      402,  401,  405,  397,   80,  633,  411,  589,  416,  471,
      471,  477,  236,  418,  403,  838,  406,  837,  387,  391,
      412,   36,  417,   86,   37,   37,  308,  419,   37,  392,
      392,   39,   40,   41,  309,  393,  393,  393,  393,  393,
      393,  394,  394,  394,  394,  394,  394,  394,  394,  394,

      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
       35,  332,   36,  427,  429,   37,   37,  308,  434,   37,
      344,  439,   39,   40,   41,  333,  349,  428,  430,  351,
      354,  445,  435,  361,  345,  440,  450,  366,  368,  441,
      350,  459,  378,  352,  355,  446,  380,  362,  385,  447,
      451,  367,  369,  436,  469,  460,  379,   80,  400,  478,
      381,  540,  386,  533,  533,  402,  405,  836,  470,  391,
      835,   36,  401,  479,   37,   37,   37,  480,   37,  403,
      406,   39,   40,   41,  392,  392,  483,  585,  585,  832,
      471,  471,  471,  471,  471,  471,   35,  831,   36,  830,

      484,   37,   37,  472,  485,   37,  473,  473,   39,   40,
       41,  474,  473,  473,  473,  473,  473,  473,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  411,
      636,  636,  829,  474,  474,  474,  474,  474,  474,   35,
      488,   36,  416,  412,   37,   37,  475,  418,   37,  496,
      427,   39,   40,   41,  489,  429,  417,  434,  505,  439,
      509,  419,  445,  497,  428,  450,  516,  459,  528,  430,
      469,  435,  506,  440,  510,  828,  446,  680,  827,  451,
      517,  460,  529,  826,  470,  391,  681,   36,  823,   86,

       37,   37,  472,  822,   37,  533,  533,   39,   40,  534,
      474,  535,  535,  535,  535,  535,  535,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  391,  819,   36,  818,
       86,   37,   37,  475,  817,   37,  537,  537,   39,   40,
       41,  476,  538,  538,  538,  538,  538,  538,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,   35,  478,   36,
      543,  483,   37,   37,  475,  488,   37,  548,  496,   39,
       40,   41,  479,  559,  544,  484,  505,  509,  516,  489,

      528,  549,  497,  543,  548,  814,  559,  560,  607,  613,
      506,  510,  517,  617,  529,   85,  620,  544,  549,   86,
      560,  813,  608,  614,  812,   87,   87,  618,   37,  811,
      621,  583,  583,  583,  583,  583,  583,  537,  537,  810,
      809,  680,  808,  585,  585,  585,  585,  585,  585,   35,
      681,   36,  807,   80,   37,   37,  586,  639,   37,  587,
      587,   39,   40,   41,  588,  587,  587,  587,  587,  587,
      587,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  622,  641,  645,  650,  588,  588,  588,  588,

      588,  588,  607,  824,  806,  666,  623,  642,  646,  651,
      805,  624,  825,  625,  633,  804,  608,  634,  634,  667,
      803,  824,  802,  634,  634,  634,  634,  634,  634,  391,
      825,   36,  801,   86,   37,   37,  586,  800,   37,  636,
      636,   39,   40,  534,  588,  637,  637,  637,  637,  637,
      637,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      652,  613,  617,  620,  622,  799,  676,  796,  678,  791,
      641,  687,  790,  789,  653,  614,  618,  621,  623,  654,
      677,  655,  679,  633,  642,  688,  634,  634,  683,  645,

      650,  652,  634,  634,  634,  634,  634,  634,  697,  699,
       80,  666,  684,  646,  651,  653,  706,  676,  678,  715,
      687,  720,  698,  700,  683,  667,  697,  699,  706,  739,
      707,  677,  679,  716,  688,  721,   80,  715,  684,  720,
      698,  700,  707,  740,  750,  761,  739,  764,  772,  750,
      775,  716,  782,  721,  784,  761,  787,  764,  751,  762,
      740,  765,  773,  751,  776,  792,  783,  794,  785,  762,
      788,  765,  772,  797,  775,  782,  784,  787,  792,  793,
      794,  795,  797,  815,  820,  815,  773,  798,  776,  783,
      785,  788,  793,  820,  795,  833,  798,  816,  821,  816,

      833,  841,  841,  849,  852,  856,  858,  821,  849,  834,
      842,  842,  860,  852,  834,  862,  864,  850,  853,  857,
      859,  856,  850,  858,  860,  862,  861,  853,  864,  863,
      865,  786,  781,  780,  779,  857,  778,  859,  861,  863,
      777,  774,  865,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   33,   33,   71,   71,
       71,  771,   71,   71,   74,   74,  770,   74,   74,   74,
       74,   74,   74,   74,   74,   77,   77,  769,   77,   77,

       77,   77,   77,   77,   77,   77,   79,   79,  768,   79,
       79,   79,   79,   79,   79,   79,   79,   84,   84,  767,
       84,  766,   84,   84,   89,  763,  760,   89,  759,  758,
       89,  757,   89,   89,   90,  756,   90,  149,  755,  149,
      149,  152,  152,  153,  754,  153,  156,  753,  156,  752,
      156,  156,  228,  228,  231,  231,  231,  749,  231,  231,
      232,  748,  232,  232,  235,  235,  747,  235,  746,  235,
      235,  309,  745,  309,  744,  309,  743,  309,  309,  309,
      309,  311,  742,  311,  311,  313,  313,  395,  395,  396,
      741,  396,  396,  398,  738,  398,  737,  398,  398,  476,

      736,  476,  735,  476,  734,  476,  476,  476,  476,  584,
      733,  732,  584,  731,  730,  584,  584,  584,  584,  635,
      729,  635,  728,  635,  635,  727,  726,  725,  724,  723,
      722,  719,  718,   80,  717,  714,  713,  712,  711,  710,
      709,  708,  705,  704,  703,  702,  701,  696,  695,  694,
      693,  692,  691,  690,  689,  686,  685,  633,  682,  675,
      674,  673,  672,  671,  670,  669,  668,  665,  664,  663,
      662,  661,  660,  659,  658,  657,  656,  649,  648,  647,
      644,  643,  640,  633,  632,  631,  630,  629,  628,  627,
      626,  619,  616,  615,  612,  611,  610,  609,  606,  605,

      604,  603,  602,  601,  600,  599,  598,  597,  596,  595,
      594,  593,  592,  591,  590,  582,  581,  580,  579,  578,
      577,  576,  575,  574,  573,  572,  571,  570,  569,  568,
      567,  566,  565,  564,  563,  562,  561,  558,  557,  556,
      555,  554,  553,  552,  551,  550,  547,  546,  545,  542,
      541,  532,  531,  530,  527,  526,  525,  524,  523,  522,
      521,  520,  519,  518,  515,  514,  513,  508,  507,  504,
      503,  502,  501,  500,  499,  498,  495,  494,  493,  492,
      491,  490,  487,  486,  482,  481,  468,  467,  466,  465,
      464,  463,  462,  461,  458,  457,  456,  455,  454,  453,

      452,  449,  448,  444,  443,  442,  438,  437,  433,  432,
      431,  426,  425,  424,  423,  422,  421,  420,  415,  414,
      413,  410,  409,  408,  407,  404,  399,  390,  389,  388,
      384,  383,  382,  377,  376,  375,  374,  373,  372,  371,
      370,  365,  364,  363,  360,  359,  358,  357,  356,  353,
      348,  347,  346,  343,  342,  341,  340,  339,  338,  337,
      336,  335,  334,  331,  330,  329,  328,  327,  326,  325,
      324,  323,  322,  321,  320,  319,  318,  317,  316,  315,
      314,  234,  307,  306,  305,  302,  301,  300,  299,  298,
      297,  296,  295,  294,  293,  290,  289,  288,  287,  286,

      285,  284,  283,  282,  281,  280,  279,  278,  277,  276,
      275,  274,  273,  272,  271,  270,  269,  268,  267,  264,
      263,  262,  261,  260,  259,  256,  255,  254,  253,  250,
      247,  246,  245,  242,  241,  240,  237,  154,  234,   75,
      226,  225,  224,  223,  222,  219,  218,  217,  216,  215,
      214,  211,  210,  207,  204,  201,  200,  199,  196,  195,
      194,  193,  190,  185,  184,  173,  172,  171,  170,  167,
      166,  165,  164,  163,  157,  154,  866,   83,   80,   78,
       78,   76,   75,  140,  139,  138,  127,  126,  125,  124,
      121,  120,  119,  118,   91,   37,  866,   37,   83,   31,

       80,   78,   78,   76,   75,   32,   32,  866,   32,   31,
      866,    9,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866
    } ;

static yyconst short int yy_chk[1755] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    5,    6,    5,    6,    3,    4,
        7,    8,   17,   17,   24,   24,   34,   34,  846,   48,
       45,    7,    8,   18,   48,   18,   42,   42,   18,   18,
       18,   45,   18,   18,   18,   18,   18,   18,   30,   18,
       18,   18,   18,   18,   18,   49,   18,   30,   50,  845,
       30,   55,   55,   60,   42,   62,   49,   60,   50,   49,

       61,   18,   20,   60,   20,   62,   61,   92,   61,   71,
       71,   20,   92,   61,   66,   20,   61,   67,   20,   20,
       20,   20,  843,   20,   20,   20,   20,   82,   66,   20,
       20,   67,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   23,   82,   23,   72,   72,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   35,   76,   35,   73,   73,   35,   35,
       35,   76,   35,   73,   80,   35,   35,   35,   37,   87,

       87,   81,   37,   80,   99,   99,   80,  109,   37,   37,
       81,   93,  110,   81,   37,   37,   37,   37,   37,   37,
       39,  109,   93,  840,   39,   93,  110,  112,  154,  112,
       39,   39,  117,   39,  117,  154,   39,   39,   39,   39,
       39,   39,   47,   47,   47,   47,  839,   47,   47,   47,
       47,  104,  838,   47,   47,  104,   47,   47,   47,   47,
       47,  104,   47,   47,   47,   47,   68,  151,  106,  121,
       68,  837,  121,   68,   68,  151,   68,   68,  106,  836,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   88,  135,  123,
       88,   88,  125,  125,  835,  128,   88,   88,   88,   88,
       88,   88,  105,  123,  135,  141,  143,  181,  105,  128,
      105,  148,  148,  169,  159,  105,  159,  831,  105,  141,
      143,  145,  145,  181,  145,  145,  163,  169,  163,  174,
      145,  145,  145,  145,  145,  145,  147,  147,  167,  147,
      147,  167,  186,  174,  188,  147,  147,  147,  147,  147,
      147,  155,  205,  212,  155,  155,  186,  223,  188,  830,
      155,  155,  155,  155,  155,  155,  205,  212,  227,  227,
      444,  223,  228,  233,  228,  229,  229,  228,  228,  228,

      251,  228,  229,  444,  228,  228,  228,  230,  230,  257,
      230,  230,  231,  231,  251,  233,  230,  230,  230,  230,
      230,  230,  268,  257,  272,  273,  275,  281,  285,  286,
      291,  297,  298,  302,  303,  540,  268,  315,  272,  273,
      275,  281,  285,  286,  291,  297,  298,  302,  303,  312,
      316,  315,  318,  312,  397,  633,  323,  540,  327,  471,
      471,  397,  633,  328,  316,  829,  318,  828,  302,  308,
      323,  308,  327,  308,  308,  308,  308,  328,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,

      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      309,  332,  309,  338,  339,  309,  309,  309,  343,  309,
      344,  348,  309,  309,  309,  332,  349,  338,  339,  351,
      354,  358,  343,  361,  344,  348,  363,  366,  368,  348,
      349,  375,  378,  351,  354,  358,  380,  361,  385,  358,
      363,  366,  368,  343,  390,  375,  378,  477,  400,  399,
      380,  477,  385,  533,  533,  402,  405,  827,  390,  391,
      826,  391,  400,  399,  391,  391,  391,  399,  391,  402,
      405,  391,  391,  391,  392,  392,  408,  585,  585,  823,
      392,  392,  392,  392,  392,  392,  393,  822,  393,  819,

      408,  393,  393,  393,  408,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  394,  394,  411,
      636,  636,  818,  394,  394,  394,  394,  394,  394,  395,
      413,  395,  416,  411,  395,  395,  395,  418,  395,  424,
      427,  395,  395,  395,  413,  429,  416,  434,  438,  439,
      443,  418,  445,  424,  427,  450,  452,  459,  465,  429,
      469,  434,  438,  439,  443,  817,  445,  631,  814,  450,
      452,  459,  465,  813,  469,  472,  631,  472,  811,  472,

      472,  472,  472,  810,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  475,  808,  475,  807,
      475,  475,  475,  475,  806,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  476,  478,  476,
      482,  483,  476,  476,  476,  488,  476,  490,  496,  476,
      476,  476,  478,  502,  482,  483,  505,  509,  516,  488,

      528,  490,  496,  543,  548,  804,  559,  502,  564,  569,
      505,  509,  516,  572,  528,  534,  574,  543,  548,  534,
      559,  803,  564,  569,  802,  534,  534,  572,  534,  801,
      574,  534,  534,  534,  534,  534,  534,  537,  537,  800,
      799,  680,  796,  537,  537,  537,  537,  537,  537,  538,
      680,  538,  791,  589,  538,  538,  538,  589,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      539,  539,  575,  591,  594,  598,  539,  539,  539,  539,

      539,  539,  607,  812,  790,  612,  575,  591,  594,  598,
      789,  575,  812,  575,  583,  786,  607,  583,  583,  612,
      781,  824,  780,  583,  583,  583,  583,  583,  583,  586,
      824,  586,  779,  586,  586,  586,  586,  778,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      599,  613,  617,  620,  622,  777,  629,  771,  630,  768,
      641,  644,  767,  766,  599,  613,  617,  620,  622,  599,
      629,  599,  630,  634,  641,  644,  634,  634,  639,  645,

      650,  652,  634,  634,  634,  634,  634,  634,  659,  660,
      639,  666,  639,  645,  650,  652,  668,  676,  678,  681,
      687,  689,  659,  660,  683,  666,  697,  699,  706,  713,
      668,  676,  678,  681,  687,  689,  683,  715,  683,  720,
      697,  699,  706,  713,  727,  737,  739,  741,  748,  750,
      752,  715,  758,  720,  759,  761,  763,  764,  727,  737,
      739,  741,  748,  750,  752,  769,  758,  770,  759,  761,
      763,  764,  772,  774,  775,  782,  784,  787,  792,  769,
      794,  770,  797,  805,  809,  815,  772,  774,  775,  782,
      784,  787,  792,  820,  794,  825,  797,  805,  809,  815,

      833,  832,  841,  842,  844,  847,  848,  820,  849,  825,
      832,  841,  851,  852,  833,  854,  855,  842,  844,  847,
      848,  856,  849,  858,  860,  862,  851,  852,  864,  854,
      855,  760,  757,  756,  755,  856,  754,  858,  860,  862,
      753,  749,  864,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  870,  870,  871,  871,
      871,  747,  871,  871,  872,  872,  746,  872,  872,  872,
      872,  872,  872,  872,  872,  873,  873,  745,  873,  873,

      873,  873,  873,  873,  873,  873,  874,  874,  744,  874,
      874,  874,  874,  874,  874,  874,  874,  875,  875,  743,
      875,  742,  875,  875,  876,  738,  736,  876,  735,  734,
      876,  733,  876,  876,  877,  732,  877,  878,  731,  878,
      878,  879,  879,  880,  730,  880,  881,  729,  881,  728,
      881,  881,  882,  882,  883,  883,  883,  726,  883,  883,
      884,  725,  884,  884,  885,  885,  724,  885,  723,  885,
      885,  886,  722,  886,  719,  886,  718,  886,  886,  886,
      886,  887,  717,  887,  887,  888,  888,  889,  889,  890,
      714,  890,  890,  891,  712,  891,  711,  891,  891,  892,

      710,  892,  709,  892,  708,  892,  892,  892,  892,  893,
      705,  704,  893,  703,  702,  893,  893,  893,  893,  894,
      701,  894,  696,  894,  894,  695,  694,  693,  692,  691,
      690,  686,  685,  684,  682,  675,  674,  673,  672,  671,
      670,  669,  665,  664,  663,  662,  661,  658,  657,  656,
      655,  654,  649,  648,  647,  643,  640,  635,  632,  628,
      627,  626,  625,  624,  619,  616,  615,  611,  610,  609,
      606,  605,  604,  603,  602,  601,  600,  597,  596,  595,
      593,  592,  590,  584,  582,  581,  580,  579,  578,  577,
      576,  573,  571,  570,  568,  567,  566,  565,  563,  562,

      561,  558,  557,  556,  555,  554,  553,  552,  551,  550,
      547,  546,  545,  542,  541,  532,  531,  530,  527,  526,
      525,  524,  523,  522,  521,  520,  519,  518,  515,  514,
      513,  512,  511,  508,  507,  504,  503,  501,  500,  499,
      498,  495,  494,  493,  492,  491,  487,  486,  485,  481,
      480,  468,  467,  466,  464,  463,  462,  461,  458,  457,
      456,  455,  454,  453,  449,  448,  447,  442,  441,  437,
      436,  433,  432,  431,  426,  425,  423,  422,  421,  420,
      415,  414,  410,  409,  407,  404,  389,  388,  387,  384,
      383,  382,  377,  376,  374,  373,  372,  371,  370,  365,

      364,  360,  359,  357,  356,  353,  347,  346,  342,  341,
      340,  337,  336,  335,  334,  331,  330,  329,  326,  325,
      324,  322,  321,  320,  319,  317,  314,  307,  306,  305,
      301,  300,  299,  296,  295,  294,  293,  290,  289,  288,
      287,  284,  283,  282,  280,  279,  278,  277,  276,  274,
      271,  270,  269,  267,  266,  265,  264,  263,  262,  261,
      260,  259,  258,  256,  255,  254,  253,  250,  249,  248,
      247,  246,  245,  244,  243,  242,  241,  240,  239,  238,
      237,  235,  226,  225,  224,  222,  221,  220,  219,  218,
      217,  216,  215,  214,  213,  211,  210,  209,  208,  207,

      204,  203,  202,  201,  200,  199,  198,  197,  196,  195,
      194,  193,  192,  191,  190,  185,  184,  183,  182,  180,
      179,  178,  177,  176,  175,  173,  172,  171,  170,  168,
      166,  165,  164,  162,  161,  160,  158,  156,  152,  150,
      140,  139,  138,  137,  136,  134,  133,  132,  131,  130,
      129,  127,  126,  124,  122,  120,  119,  118,  116,  115,
      114,  113,  111,  108,  107,  103,  102,  101,  100,   98,
       97,   96,   95,   94,   91,   89,   85,   84,   79,   78,
       77,   75,   74,   65,   64,   63,   59,   58,   57,   56,
       54,   53,   52,   51,   46,   40,   38,   36,   33,   31,

       29,   28,   27,   26,   25,   22,   21,   19,   13,   11,
        9,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#define INITIAL 0
/**********************************************************
		SkinParser.l
	===========================
	Skin XML file lexer

	NOTES: - Meant to be compiled with the -i option
	       - Expects the parser to be compiled with
		        "-Psp" to set the correct prefix


**********************************************************/
/*= D E F I N I T I O N S ======================================*/
	//= I N C L U D E S ====================================================
	#include "MAMEoX.h"
	#include "xbox_FileIO.h"
	#include "StdString.h"
	#include "DebugLogger.h"

	#include "Skin.h"
	#include "SkinParser_yacc.cpp.h"

	#include <vector>
	#include <string>
	#include <malloc.h>

	//= D E F I N E S ======================================================

		/* Tell lex that we're never interactive */
	#define YY_NEVER_INTERACTIVE   1

		/* Redefine YY_INPUT to use osd_file */
	#undef YY_INPUT
	#define YY_INPUT( buf, result, max_size )			\
			if( ((result = osd_fread( g_parserSkinObject->m_parserFile, buf, max_size )) == 0 ) && !osd_feof( g_parserSkinObject->m_parserFile ) ) \
				YY_FATAL_ERROR( "input in flex scanner failed" );



	//= G L O B A L = V A R S ==============================================
	extern CSkin *g_parserSkinObject;
	static std::vector<int>					g_parentStateStack;


	//= P R O T O T Y P E S ================================================
	static void pushState( int state );
	static void popState( void );

		// Defined in SkinParser.y
	const char *SkinParserNewString( const char * );

/* YYTEXT is a pointer */
/***** USER DEFINITIONS ************************************/
/* Whitespace, including \r\n's and tabs */
/* Alphanumeric digit */
/* Base 16 digit */
/* Single letter */
/* An identifier starts with a letter and contains any
number of '_''s, LETTER's, or base 10 digits
*/
/* Keywords */
/* Screen widgets */
/* Popup widgets */
/* Screensaver */
/* Exclusive StartConditions */
#define COMMENT_STATE 1
#define STRING_STATE 2
#define METADATA_GARBAGE_STATE 3


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;


 /*= R U L E S ==================================================*/


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 867 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1712 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ /* Jump into comment_state */
															pushState( COMMENT_STATE );
														}
	YY_BREAK
case 2:
YY_RULE_SETUP
{ /* Throw away anything until the closing tag  */
															pushState( METADATA_GARBAGE_STATE );
														}
	YY_BREAK
case 3:
YY_RULE_SETUP
{ /* Whitespace is junk */
														}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "SKIN_OPEN" )); return SKIN_OPEN; }
	YY_BREAK
case 5:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "SKIN_CLOSE" )); return SKIN_CLOSE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "RESOURCEDEFINITIONS_OPEN" )); return RESOURCEDEFINITIONS_OPEN; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "RESOURCEDEFINITIONS_CLOSE" )); return RESOURCEDEFINITIONS_CLOSE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "RESOURCEFILE_OPEN" )); return RESOURCEFILE_OPEN; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "RESOURCEFILE_CLOSE" )); return RESOURCEFILE_CLOSE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "COLORCHANNELFILENAME_OPEN" )); return COLORCHANNELFILENAME_OPEN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "COLORCHANNELFILENAME_CLOSE" )); return COLORCHANNELFILENAME_CLOSE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "ALPHACHANNELFILENAME_OPEN" )); return ALPHACHANNELFILENAME_OPEN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "ALPHACHANNELFILENAME_CLOSE" )); return ALPHACHANNELFILENAME_CLOSE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "RESOURCE_OPEN" )); return RESOURCE_OPEN; }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "RESOURCE_CLOSE" )); return RESOURCE_CLOSE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "ID_OPEN" )); return ID_OPEN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "ID_CLOSE" )); return ID_CLOSE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "AREA_OPEN" )); return AREA_OPEN; }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "AREA_CLOSE" )); return AREA_CLOSE; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "LEFT_OPEN" )); return LEFT_OPEN; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "LEFT_CLOSE" )); return LEFT_CLOSE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "TOP_OPEN" )); return TOP_OPEN; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "TOP_CLOSE" )); return TOP_CLOSE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "RIGHT_OPEN" )); return RIGHT_OPEN; }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "RIGHT_CLOSE" )); return RIGHT_CLOSE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "BOTTOM_OPEN" )); return BOTTOM_OPEN; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "BOTTOM_CLOSE" )); return BOTTOM_CLOSE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "BACKDROP_OPEN" )); return BACKDROP_OPEN; }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "BACKDROP_CLOSE" )); return BACKDROP_CLOSE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "DEFAULTS_OPEN" )); return DEFAULTS_OPEN; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "DEFAULTS_CLOSE" )); return DEFAULTS_CLOSE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "TEXT_OPEN" )); return TEXT_OPEN; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "TEXT_CLOSE" )); return TEXT_CLOSE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "FONT_OPEN" )); return FONT_OPEN; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "FONT_CLOSE" )); return FONT_CLOSE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "COLOR_OPEN" )); return COLOR_OPEN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "COLOR_CLOSE" )); return COLOR_CLOSE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "STRING_OPEN" )); return STRING_OPEN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "STRING_CLOSE" )); return STRING_CLOSE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "CENTERVERTICALLY" )); return CENTERVERTICALLY; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "CENTERHORIZONTALLY" )); return CENTERHORIZONTALLY; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "UNBOUNDED" )); return UNBOUNDED; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "ALPHA_OPEN" )); return ALPHA_OPEN; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "ALPHA_CLOSE" )); return ALPHA_CLOSE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "RED_OPEN" )); return RED_OPEN; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "RED_CLOSE" )); return RED_CLOSE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "GREEN_OPEN" )); return GREEN_OPEN; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "GREEN_CLOSE" )); return GREEN_CLOSE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "BLUE_OPEN" )); return BLUE_OPEN; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "BLUE_CLOSE" )); return BLUE_CLOSE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "ARGB_OPEN" )); return ARGB_OPEN; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "ARGB_CLOSE" )); return ARGB_CLOSE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "ICON_OPEN" )); return ICON_OPEN; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "ICON_CLOSE" )); return ICON_CLOSE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "TEXTUREID_OPEN" )); return TEXTUREID_OPEN; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "TEXTUREID_CLOSE" )); return TEXTUREID_CLOSE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "POSITION_OPEN" )); return POSITION_OPEN; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "POSITION_CLOSE" )); return POSITION_CLOSE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "X_OPEN" )); return X_OPEN; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "X_CLOSE" )); return X_CLOSE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "Y_OPEN" )); return Y_OPEN; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "Y_CLOSE" )); return Y_CLOSE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "SIZE_OPEN" )); return SIZE_OPEN; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "SIZE_CLOSE" )); return SIZE_CLOSE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "WIDTH_OPEN" )); return WIDTH_OPEN; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "WIDTH_CLOSE" )); return WIDTH_CLOSE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "HEIGHT_OPEN" )); return HEIGHT_OPEN; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "HEIGHT_CLOSE" )); return HEIGHT_CLOSE; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "CONDITION_OPEN" )); return CONDITION_OPEN; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "CONDITION_CLOSE" )); return CONDITION_CLOSE; }
	YY_BREAK
/* Screen widgets */
case 71:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "HELPSCREEN_OPEN" )); return HELPSCREEN_OPEN; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "HELPSCREEN_CLOSE" )); return HELPSCREEN_CLOSE; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "OPTIONSSCREEN_OPEN" )); return OPTIONSSCREEN_OPEN; }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "OPTIONSSCREEN_CLOSE" )); return OPTIONSSCREEN_CLOSE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "ROMLISTSCREEN_OPEN" )); return ROMLISTSCREEN_OPEN; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "ROMLISTSCREEN_CLOSE" )); return ROMLISTSCREEN_CLOSE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "SPLASHSCREEN_OPEN" )); return SPLASHSCREEN_OPEN; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "SPLASHSCREEN_CLOSE" )); return SPLASHSCREEN_CLOSE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "MESSAGESCREEN_OPEN" )); return MESSAGESCREEN_OPEN; }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "MESSAGESCREEN_CLOSE" )); return MESSAGESCREEN_CLOSE; }
	YY_BREAK
/* Popup widgets */
case 81:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "STARTMENU_OPEN" )); return STARTMENU_OPEN; }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "STARTMENU_CLOSE" )); return STARTMENU_CLOSE; }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "VIRTUALKEYBOARD_OPEN" )); return VIRTUALKEYBOARD_OPEN; }
	YY_BREAK
case 84:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "VIRTUALKEYBOARD_CLOSE" )); return VIRTUALKEYBOARD_CLOSE; }
	YY_BREAK
/* Screensaver */
case 85:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "SCREENSAVER_OPEN" )); return SCREENSAVER_OPEN; }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ PRINTMSG(( T_TRACE, "SCREENSAVER_CLOSE" )); return SCREENSAVER_CLOSE; }
	YY_BREAK
/* Note that all macros/filenames/numbers are returned as strings. The SkinParser
	 does not evaluate macros/immediate values. This is done in the MacroParser */
case 87:
YY_RULE_SETUP
{
										splval.stringVal = SkinParserNewString( sptext );
										PRINTMSG(( T_INFO, "_TOK_MACRO_: %s", sptext ));
										return _TOK_MACRO_;
									}
	YY_BREAK
case 88:
YY_RULE_SETUP
{
										splval.stringVal = SkinParserNewString( sptext );
										PRINTMSG(( T_INFO, "_TOK_MACRO_OPERATOR_: %s", sptext ));
										return _TOK_MACRO_OPERATOR_;
									}
	YY_BREAK
case 89:
YY_RULE_SETUP
{ 
										splval.stringVal = SkinParserNewString( sptext );
										PRINTMSG(( T_INFO, "_TOK_IDENTIFIER_: %s", sptext ));
										return _TOK_IDENTIFIER_;
									}
	YY_BREAK
case 90:
YY_RULE_SETUP
{
										splval.stringVal = SkinParserNewString( sptext );
										PRINTMSG(( T_INFO, "_TOK_FILENAME_: %s", sptext ));
										return _TOK_FILENAME_;
									}
	YY_BREAK
case 91:
YY_RULE_SETUP
{
										splval.stringVal = SkinParserNewString( sptext );
										PRINTMSG(( T_INFO, "_TOK_INT_: %s", sptext ));
										return _TOK_INT_;
									}
	YY_BREAK
case 92:
YY_RULE_SETUP
{
										splval.stringVal = SkinParserNewString( sptext );
										PRINTMSG(( T_INFO, "_TOK_INT_: %s", sptext ));
										return _TOK_INT_;
									}
	YY_BREAK
case 93:
YY_RULE_SETUP
{
										pushState(STRING_STATE);
									}
	YY_BREAK
case 94:
YY_RULE_SETUP
{ /* Anything hitting this rule is probably an error, but ignore it */
										#ifdef _DEBUG
											ECHO;
										#endif
									}
	YY_BREAK
/*--- C O M M E N T - S T A T E -----------------------------------*/
case 95:
YY_RULE_SETUP
{  /* Eat anything until COMMENT_END */
																				/* Maintain the line count */
																			const char *newline = strchr( sptext, '\n' );
																			while( newline )
																			{
																				++g_parserSkinObject->m_parserLine;
																				newline = strchr( newline + 1, '\n' );
																			}

																			popState();
																		}
	YY_BREAK
/*--- M E T A D A T A - G A R B A G E - S T A T E -----------------*/
case 96:
YY_RULE_SETUP
{  /* Eat anything until TAG_METADATA_CLOSE */
																											/* Maintain the line count */
																										const char *newline = strchr( sptext, '\n' );
																										while( newline )
																										{
																											++g_parserSkinObject->m_parserLine;
																											newline = strchr( newline + 1, '\n' );
																										}
																										popState();
																									}
	YY_BREAK
/*--- S T R I N G - S T A T E -------------------------------------*/
case 97:
YY_RULE_SETUP
{  /* Eat everything until the string is ended  */
																		/* Maintain the line count */
																	const char *newline = strchr( sptext, '\n' );
																	while( newline )
																	{
																		++g_parserSkinObject->m_parserLine;
																		newline = strchr( newline + 1, '\n' );
																	}

																	splval.stringVal = SkinParserNewString( sptext );
																	PRINTMSG(( T_TRACE, "_TOK_STRING_: %s", sptext ));
																	popState();

																	return _TOK_STRING_;
																}
	YY_BREAK
case 98:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT_STATE):
case YY_STATE_EOF(STRING_STATE):
case YY_STATE_EOF(METADATA_GARBAGE_STATE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 867 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 867 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 866);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif

 /*= U S E R = C O D E ==========================================*/
/*--------------------------------------------------------------------
	spwrap
--------------------------------------------------------------------*/
int spwrap( void )
{
		/* Return 1 to indicate that there are no more input files */
	return 1;
}

/*--------------------------------------------------------------------
	sperror
--------------------------------------------------------------------*/
void sperror( const char *error_text )
{
	PRINTMSG(( T_ERROR, 
						 "An error has occured while parsing skin.xml line %d: %s",
						 g_parserSkinObject->m_parserLine,
						 error_text ));

	g_parserSkinObject->m_parserErrorString = error_text;
}

/*--------------------------------------------------------------------
	sperror
--------------------------------------------------------------------*/
void sperror( const CStdString &error_text )
{
	PRINTMSG(( T_ERROR, 
						 "An error has occured while parsing skin.xml line %d: %s",
						 g_parserSkinObject->m_parserLine,
						 error_text.c_str() ));

	g_parserSkinObject->m_parserErrorString = error_text;
}


/*--------------------------------------------------------------------
	pushState
--------------------------------------------------------------------*/
static void pushState( int state )
{
	g_parentStateStack.push_back( YY_START );
	BEGIN( state );
}

/*--------------------------------------------------------------------
	popState
--------------------------------------------------------------------*/
static void popState( void )
{
	int parentState = g_parentStateStack.back();
	g_parentStateStack.pop_back();
	BEGIN(parentState);
}
