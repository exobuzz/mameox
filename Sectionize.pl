#!/bin/perl

my @FILEs = `find ./MAME/src/drivers/*.c`;

use constant DATA_PREFIX  => 'D';
use constant CODE_PREFIX  => 'C';
use constant BSS_PREFIX   => 'B';
use constant CONST_PREFIX => 'K';


	# Create the imageblddbg.switch file
open( DBGPRELOADFILE, ">imageblddbg.switch" );
print DBGPRELOADFILE "/IN:\"Debug\\MAMEoX.exe\"\n";
print DBGPRELOADFILE "/OUT:\"Debug\\MAMEoX.xbe\"\n";
print DBGPRELOADFILE "/STACK:\"0x20000\"\n";
print DBGPRELOADFILE "/DEBUG\n";
print DBGPRELOADFILE "/LIMITMEM\n";
print DBGPRELOADFILE "/NOLOGO\n";
print DBGPRELOADFILE "/formatud\n";
print DBGPRELOADFILE "/testname:\"MAMEoX Util (Don't Run)\"\n";
print DBGPRELOADFILE "/testid:0x4D414D45\n";

open( PRELOADFILE, ">imagebld.switch" );
print DBGPRELOADFILE "/IN:\"Release\\MAMEoX.exe\"\n";
print DBGPRELOADFILE "/OUT:\"Release\\MAMEoX.xbe\"\n";
print PRELOADFILE "/STACK:\"0x20000\"\n";
print PRELOADFILE "/LIMITMEM\n";
print PRELOADFILE "/NOLOGO\n";
print PRELOADFILE "/formatud\n";
print PRELOADFILE "/testname:\"MAMEoX Util (Don't Run)\"\n";
print PRELOADFILE "/testid:0x4D414D45\n";


	# Create the Sections.h file
open( GENERATEDFILE, ">./MAMEoX/includes/Sections.h" );
print GENERATEDFILE "/**\n";
print GENERATEDFILE "  * \\file      Sections.h\n";
print GENERATEDFILE "  * \\brief     Registration of MAME files for creation and usage of XBOX\n";
print GENERATEDFILE "  *             loadable sections.\n";
print GENERATEDFILE "  *\n";
print GENERATEDFILE "  * \\note      This file is autogenerated via Sectionize.pl DO NOT EDIT!\n";
print GENERATEDFILE "  */\n";
print GENERATEDFILE "#pragma once\n";
print GENERATEDFILE "//= I N C L U D E S ====================================================\n";
print GENERATEDFILE "#ifdef __cplusplus\n";
print GENERATEDFILE "extern \"C\" {\n";
print GENERATEDFILE "#endif\n";
print GENERATEDFILE "#include \"osd_cpu.h\"\n";
print GENERATEDFILE "#ifdef __cplusplus\n";
print GENERATEDFILE "}\n";
print GENERATEDFILE "#endif\n";
print GENERATEDFILE "//= P R O T O T Y P E S ================================================\n";
print GENERATEDFILE "\n#ifdef _DEBUG\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "//	CheckDriverSectionRAM\n";
print GENERATEDFILE "//! \\brief    Prints the size of each driver/snd/vdeo segment\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "void CheckDriverSectionRAM( void );\n";
print GENERATEDFILE "\n//-------------------------------------------------------------\n";
print GENERATEDFILE "//	CheckCPUSectionRAM\n";
print GENERATEDFILE "//! \\brief    Prints the size of each CPU segment\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "void CheckCPUSectionRAM( void );\n";
print GENERATEDFILE "#endif\n\n";
print GENERATEDFILE "\n//-------------------------------------------------------------\n";
print GENERATEDFILE "//	RegisterDriverSectionNames\n";
print GENERATEDFILE "//! \\brief    Registers all of the segments for use by\n";
print GENERATEDFILE "//!            LoadDriverSectionByName and UnloadDriverSectionByName\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "void RegisterDriverSectionNames( void );\n";
print GENERATEDFILE "\n//-------------------------------------------------------------\n";
print GENERATEDFILE "//	LoadDriverSectionByName\n";
print GENERATEDFILE "//! \\brief    Loads the section associated with the passed name\n";
print GENERATEDFILE "//!\n";
print GENERATEDFILE "//! \\param    DriverFileName - The name of the file whose section\n";
print GENERATEDFILE "//!                             should be loaded\n";
print GENERATEDFILE "//!\n";
print GENERATEDFILE "//! \\return   BOOL - Operation status\n";
print GENERATEDFILE "//! \\retval   TRUE - success\n";
print GENERATEDFILE "//! \\return   FALSE - Failure\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "BOOL LoadDriverSectionByName( const char *DriverFileName );\n";
print GENERATEDFILE "\n//-------------------------------------------------------------\n";
print GENERATEDFILE "//	UnloadDriverSectionByName\n";
print GENERATEDFILE "//! \\brief    Unloads the section associated with the passed name\n";
print GENERATEDFILE "//!\n";
print GENERATEDFILE "//! \\param    DriverFileName - The name of the file whose section\n";
print GENERATEDFILE "//!                             should be unloaded\n";
print GENERATEDFILE "//!\n";
print GENERATEDFILE "//! \\return   BOOL - Operation status\n";
print GENERATEDFILE "//! \\retval   TRUE - success\n";
print GENERATEDFILE "//! \\return   FALSE - Failure\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "BOOL UnloadDriverSectionByName( const char *DriverFileName );\n";
print GENERATEDFILE "\n//-------------------------------------------------------------\n";
print GENERATEDFILE "//	LoadDriverDataSections\n";
print GENERATEDFILE "//! \\brief    Loads all of the driver data sections\n";
print GENERATEDFILE "//!\n";
print GENERATEDFILE "//! \\return   BOOL - Operation status\n";
print GENERATEDFILE "//! \\retval   TRUE - success\n";
print GENERATEDFILE "//! \\return   FALSE - Failure\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "BOOL LoadDriverDataSections( void );\n";
print GENERATEDFILE "\n//-------------------------------------------------------------\n";
print GENERATEDFILE "//	UnloadDriverDataSections\n";
print GENERATEDFILE "//! \\brief    Unloads all of the driver data sections\n";
print GENERATEDFILE "//!\n";
print GENERATEDFILE "//! \\return   BOOL - Operation status\n";
print GENERATEDFILE "//! \\retval   TRUE - success\n";
print GENERATEDFILE "//! \\return   FALSE - Failure\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "BOOL UnloadDriverDataSections( void );\n";
print GENERATEDFILE "\n//-------------------------------------------------------------\n";
print GENERATEDFILE "//	UnloadDriverNonDataSections\n";
print GENERATEDFILE "//! \\brief    Unloads all non-data driver sections\n";
print GENERATEDFILE "//!\n";
print GENERATEDFILE "//! \\return   BOOL - Operation status\n";
print GENERATEDFILE "//! \\retval   TRUE - success\n";
print GENERATEDFILE "//! \\return   FALSE - Failure\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "BOOL UnloadDriverNonDataSections( void );\n";
print GENERATEDFILE "\n//-------------------------------------------------------------\n";
print GENERATEDFILE "//	RegisterCPUSectionNames\n";
print GENERATEDFILE "//! \\brief    Registers all of the segments for use by\n";
print GENERATEDFILE "//!            LoadCPUSectionByName and UnloadCPUSectionByName\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "void RegisterCPUSectionNames( void );\n";
print GENERATEDFILE "\n//-------------------------------------------------------------\n";
print GENERATEDFILE "//	LoadCPUSectionByName\n";
print GENERATEDFILE "//! \\brief    Loads the section associated with the passed name\n";
print GENERATEDFILE "//!\n";
print GENERATEDFILE "//! \\param    CPUFileName - The name of the file whose section\n";
print GENERATEDFILE "//!                             should be loaded\n";
print GENERATEDFILE "//!\n";
print GENERATEDFILE "//! \\return   BOOL - Operation status\n";
print GENERATEDFILE "//! \\retval   TRUE - success\n";
print GENERATEDFILE "//! \\return   FALSE - Failure\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "BOOL LoadCPUSectionByName( const char *CPUFileName );\n";
print GENERATEDFILE "\n//-------------------------------------------------------------\n";
print GENERATEDFILE "//	UnloadCPUSectionByName\n";
print GENERATEDFILE "//! \\brief    Unloads the section associated with the passed name\n";
print GENERATEDFILE "//!\n";
print GENERATEDFILE "//! \\param    CPUFileName - The name of the file whose section\n";
print GENERATEDFILE "//!                             should be unloaded\n";
print GENERATEDFILE "//!\n";
print GENERATEDFILE "//! \\return   BOOL - Operation status\n";
print GENERATEDFILE "//! \\retval   TRUE - success\n";
print GENERATEDFILE "//! \\return   FALSE - Failure\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "BOOL UnloadCPUSectionByName( const char *CPUFileName );\n";
close( GENERATEDFILE );


	# Create the DriverSections.cpp file
open( GENERATEDFILE, ">./MAMEoX/sources/DriverSections.cpp" );
print GENERATEDFILE "/**\n";
print GENERATEDFILE "  * \\file      DriverSections.cpp\n";
print GENERATEDFILE "  * \\brief     Registration of driver files for creation and usage of XBOX\n";
print GENERATEDFILE "  *             loadable sections\n";
print GENERATEDFILE "  *\n";
print GENERATEDFILE "  * \\note      This file is autogenerated via Sectionize.pl DO NOT EDIT!\n";
print GENERATEDFILE "  */\n\n";
print GENERATEDFILE "//= I N C L U D E S ====================================================\n";
print GENERATEDFILE "#include <Xtl.h>\n";
print GENERATEDFILE "#include <stdio.h>\n";
print GENERATEDFILE "#include <map>\n";
print GENERATEDFILE "#include <string>\n";
print GENERATEDFILE "#include \"MAMEoX.h\"\n";
print GENERATEDFILE "#include \"DebugLogger.h\"\n";
print GENERATEDFILE "extern \"C\" {\n";
print GENERATEDFILE "#include \"osd_cpu.h\"\n";
print GENERATEDFILE "}\n";
print GENERATEDFILE "//= D E F I N E S ======================================================\n";
print GENERATEDFILE "#define DATA_PREFIX      \"".DATA_PREFIX."\"\n";
print GENERATEDFILE "#define CODE_PREFIX      \"".CODE_PREFIX."\"\n";
print GENERATEDFILE "#define BSS_PREFIX       \"".BSS_PREFIX."\"\n";
print GENERATEDFILE "#define CONST_PREFIX     \"".CONST_PREFIX."\"\n";
print GENERATEDFILE "\n";
print GENERATEDFILE "//= G L O B A L = V A R S ==============================================\n";
print GENERATEDFILE "static std::map< std::string, std::string >  g_nameToSectionMap;\n";
print GENERATEDFILE "//= F U N C T I O N S ==================================================\n";
print GENERATEDFILE "\n#ifdef _DEBUG\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "//	CheckDriverSectionRAM\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "void CheckDriverSectionRAM( void )\n";
print GENERATEDFILE "{\n";
print GENERATEDFILE "  std::map< std::string, std::string >::iterator i = g_nameToSectionMap.begin();\n";
print GENERATEDFILE "  for( ; i != g_nameToSectionMap.end(); ++i )\n";
print GENERATEDFILE "  {\n";
print GENERATEDFILE "    std::string sectionName;\n";
print GENERATEDFILE "    sectionName = CODE_PREFIX;\n";
print GENERATEDFILE "    sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "    HANDLE h = XGetSectionHandle( sectionName.c_str() );\n";
print GENERATEDFILE "    if( h != INVALID_HANDLE_VALUE )\n";
print GENERATEDFILE "    {\n";
print GENERATEDFILE "      UINT32 sz = XGetSectionSize( h );\n";
print GENERATEDFILE "      PRINTMSG( T_INFO, \"Driver %s [CODE]: %lu\", (*i).first.c_str(), sz );\n";
print GENERATEDFILE "    }\n";
print GENERATEDFILE "    else\n";
print GENERATEDFILE "      PRINTMSG( T_ERROR, \"Invalid section %s for file %s!\", (*i).second.c_str(), (*i).first.c_str() );\n";
print GENERATEDFILE "\n";
print GENERATEDFILE "    sectionName = DATA_PREFIX;\n";
print GENERATEDFILE "    sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "    h = XGetSectionHandle( sectionName.c_str() );\n";
print GENERATEDFILE "    if( h != INVALID_HANDLE_VALUE )\n";
print GENERATEDFILE "    {\n";
print GENERATEDFILE "      UINT32 sz = XGetSectionSize( h );\n";
print GENERATEDFILE "      PRINTMSG( T_INFO, \"Driver %s [DATA]: %lu\", (*i).first.c_str(), sz );\n";
print GENERATEDFILE "    }\n";
print GENERATEDFILE "    else\n";
print GENERATEDFILE "      PRINTMSG( T_ERROR, \"Invalid section %s for file %s!\", (*i).second.c_str(), (*i).first.c_str() );\n";
print GENERATEDFILE "\n";
print GENERATEDFILE "    sectionName = BSS_PREFIX;\n";
print GENERATEDFILE "    sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "    h = XGetSectionHandle( sectionName.c_str() );\n";
print GENERATEDFILE "    if( h != INVALID_HANDLE_VALUE )\n";
print GENERATEDFILE "    {\n";
print GENERATEDFILE "      UINT32 sz = XGetSectionSize( h );\n";
print GENERATEDFILE "      PRINTMSG( T_INFO, \"Driver %s [BSS]: %lu\", (*i).first.c_str(), sz );\n";
print GENERATEDFILE "    }\n";
print GENERATEDFILE "    else\n";
print GENERATEDFILE "    {\n";
print GENERATEDFILE "      PRINTMSG( T_ERROR, \"Invalid section %s for file %s!\", (*i).second.c_str(), (*i).first.c_str() );\n";
print GENERATEDFILE "    }\n";
print GENERATEDFILE "\n";
print GENERATEDFILE "    sectionName = CONST_PREFIX;\n";
print GENERATEDFILE "    sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "    h = XGetSectionHandle( sectionName.c_str() );\n";
print GENERATEDFILE "    if( h != INVALID_HANDLE_VALUE )\n";
print GENERATEDFILE "    {\n";
print GENERATEDFILE "      UINT32 sz = XGetSectionSize( h );\n";
print GENERATEDFILE "      PRINTMSG( T_INFO, \"Driver %s [CONST]: %lu\", (*i).first.c_str(), sz );\n";
print GENERATEDFILE "    }\n";
print GENERATEDFILE "    else\n";
print GENERATEDFILE "      PRINTMSG( T_ERROR, \"Invalid section %s for file %s!\", (*i).second.c_str(), (*i).first.c_str() );\n";
print GENERATEDFILE "\n";
print GENERATEDFILE "    DebugLoggerFlush();\n";
print GENERATEDFILE "  }\n";
print GENERATEDFILE "}\n";
print GENERATEDFILE "#endif\n\n";
print GENERATEDFILE "\n//-------------------------------------------------------------\n";
print GENERATEDFILE "//	RegisterSectionName\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "static void RegisterSectionName( const char *DriverFileName, const char *DataSectionName )\n";
print GENERATEDFILE "{\n";
print GENERATEDFILE "    // Add the section name to the map\n";
print GENERATEDFILE "  g_nameToSectionMap[ DriverFileName ] = DataSectionName;\n";
print GENERATEDFILE "}\n\n";
print GENERATEDFILE "\n//-------------------------------------------------------------\n";
print GENERATEDFILE "//	LoadDriverSectionByName\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "BOOL LoadDriverSectionByName( const char *DriverFileName )\n";
print GENERATEDFILE "{\n";
print GENERATEDFILE "  std::map< std::string, std::string >::iterator i = g_nameToSectionMap.find( DriverFileName );\n";
print GENERATEDFILE "  if( i == g_nameToSectionMap.end() )\n";
print GENERATEDFILE "    return FALSE;\n";
print GENERATEDFILE "  std::string sectionName;\n";
print GENERATEDFILE "  void *addr;\n";
print GENERATEDFILE "  sectionName = DATA_PREFIX;\n";
print GENERATEDFILE "  sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "  addr = XLoadSection( sectionName.c_str() );\n";
print GENERATEDFILE "  if( !addr )\n";
print GENERATEDFILE "  {\n";
print GENERATEDFILE "    UINT32 lastErr = GetLastError();\n";
print GENERATEDFILE "    PRINTMSG( T_ERROR, \"XLoadSection failed! 0x%X\\r\\n\", lastErr );\n";
print GENERATEDFILE "    //osd_print_error( \"Failed to load section %s!\", sectionName.c_str() );\n";
print GENERATEDFILE "    //return FALSE;\n";
print GENERATEDFILE "  }\n";
print GENERATEDFILE "\n";
print GENERATEDFILE "  sectionName = CODE_PREFIX;\n";
print GENERATEDFILE "  sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "  addr = XLoadSection( sectionName.c_str() );\n";
print GENERATEDFILE "  if( !addr )\n";
print GENERATEDFILE "  {\n";
print GENERATEDFILE "    UINT32 lastErr = GetLastError();\n";
print GENERATEDFILE "    PRINTMSG( T_ERROR, \"XLoadSection failed! 0x%X\\r\\n\", lastErr );\n";
print GENERATEDFILE "    //osd_print_error( \"Failed to load section %s!\", sectionName.c_str() );\n";
print GENERATEDFILE "    //return FALSE;\n";
print GENERATEDFILE "  }\n";
print GENERATEDFILE "\n";
print GENERATEDFILE "  sectionName = BSS_PREFIX;\n";
print GENERATEDFILE "  sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "  addr = XLoadSection( sectionName.c_str() );\n";
print GENERATEDFILE "  if( !addr )\n";
print GENERATEDFILE "  {\n";
print GENERATEDFILE "    UINT32 lastErr = GetLastError();\n";
print GENERATEDFILE "    PRINTMSG( T_ERROR, \"XLoadSection failed! 0x%X\\r\\n\", lastErr );\n";
print GENERATEDFILE "    //osd_print_error( \"Failed to load section %s!\", sectionName.c_str() );\n";
print GENERATEDFILE "    //return FALSE;\n";
print GENERATEDFILE "  }\n";
print GENERATEDFILE "\n";
print GENERATEDFILE "  sectionName = CONST_PREFIX;\n";
print GENERATEDFILE "  sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "  addr = XLoadSection( sectionName.c_str() );\n";
print GENERATEDFILE "  if( !addr )\n";
print GENERATEDFILE "  {\n";
print GENERATEDFILE "    UINT32 lastErr = GetLastError();\n";
print GENERATEDFILE "    PRINTMSG( T_ERROR, \"XLoadSection failed! 0x%X\\r\\n\", lastErr );\n";
print GENERATEDFILE "    //osd_print_error( \"Failed to load section %s!\", sectionName.c_str() );\n";
print GENERATEDFILE "    //return FALSE;\n";
print GENERATEDFILE "  }\n";
print GENERATEDFILE "  return TRUE;\n";
print GENERATEDFILE "}\n\n";
print GENERATEDFILE "\n//-------------------------------------------------------------\n";
print GENERATEDFILE "//	UnloadDriverSectionByName\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "BOOL UnloadDriverSectionByName( const char *DriverFileName )\n";
print GENERATEDFILE "{\n";
print GENERATEDFILE "  std::map< std::string, std::string >::iterator i = g_nameToSectionMap.find( DriverFileName );\n";
print GENERATEDFILE "  if( i == g_nameToSectionMap.end() )\n";
print GENERATEDFILE "    return FALSE;\n";
print GENERATEDFILE "  BOOL dataRet, codeRet, bssRet, constRet;\n";
print GENERATEDFILE "  std::string sectionName;\n";
print GENERATEDFILE "  sectionName = DATA_PREFIX;\n";
print GENERATEDFILE "  sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "  dataRet = XFreeSection( sectionName.c_str() );\n";
print GENERATEDFILE "\n";
print GENERATEDFILE "  sectionName = CODE_PREFIX;\n";
print GENERATEDFILE "  sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "  codeRet = XFreeSection( sectionName.c_str() );\n";
print GENERATEDFILE "\n";
print GENERATEDFILE "  sectionName = BSS_PREFIX;\n";
print GENERATEDFILE "  sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "  bssRet = XFreeSection( sectionName.c_str() );\n";
print GENERATEDFILE "\n";
print GENERATEDFILE "  sectionName = CONST_PREFIX;\n";
print GENERATEDFILE "  sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "  constRet = XFreeSection( sectionName.c_str() );\n";
print GENERATEDFILE "\n";
print GENERATEDFILE "  return (dataRet && codeRet && bssRet && constRet);\n";
print GENERATEDFILE "}\n\n";
print GENERATEDFILE "\n//-------------------------------------------------------------\n";
print GENERATEDFILE "//	LoadDriverDataSections\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "BOOL LoadDriverDataSections( void )\n";
print GENERATEDFILE "{\n";
print GENERATEDFILE "  std::map< std::string, std::string >::iterator i = g_nameToSectionMap.begin();\n";
print GENERATEDFILE "  for( ; i != g_nameToSectionMap.end(); ++i )\n";
print GENERATEDFILE "  {\n";
print GENERATEDFILE "    std::string sectionName;\n";
print GENERATEDFILE "    sectionName = DATA_PREFIX;\n";
print GENERATEDFILE "    sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "    if( !XLoadSection( sectionName.c_str() ) )\n";
print GENERATEDFILE "    {\n";
print GENERATEDFILE "      PRINTMSG( T_ERROR, \"Failed to load section %s!\", sectionName.c_str() );\n";
print GENERATEDFILE "      //return FALSE;\n";
print GENERATEDFILE "    }\n";
print GENERATEDFILE "\n";
print GENERATEDFILE "    sectionName = CONST_PREFIX;\n";
print GENERATEDFILE "    sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "    if( !XLoadSection( sectionName.c_str() ) )\n";
print GENERATEDFILE "    {\n";
print GENERATEDFILE "      PRINTMSG( T_ERROR, \"Failed to load section %s!\", sectionName.c_str() );\n";
print GENERATEDFILE "      //return FALSE;\n";
print GENERATEDFILE "    }\n";
print GENERATEDFILE "  }\n";
print GENERATEDFILE "  return TRUE;\n";
print GENERATEDFILE "}\n\n";
print GENERATEDFILE "\n//-------------------------------------------------------------\n";
print GENERATEDFILE "//	UnloadDriverNonDataSections\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "BOOL UnloadDriverNonDataSections( void )\n";
print GENERATEDFILE "{\n";
print GENERATEDFILE "  std::map< std::string, std::string >::iterator i = g_nameToSectionMap.begin();\n";
print GENERATEDFILE "  for( ; i != g_nameToSectionMap.end(); ++i )\n";
print GENERATEDFILE "  {\n";
print GENERATEDFILE "    std::string sectionName;\n";
print GENERATEDFILE "    sectionName = CODE_PREFIX;\n";
print GENERATEDFILE "    sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "    HANDLE h = XGetSectionHandle( sectionName.c_str() );\n";
print GENERATEDFILE "    if( h != INVALID_HANDLE_VALUE )\n";
print GENERATEDFILE "      XFreeSectionByHandle( h );\n";
print GENERATEDFILE "\n";
print GENERATEDFILE "    sectionName = BSS_PREFIX;\n";
print GENERATEDFILE "    sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "    h = XGetSectionHandle( sectionName.c_str() );\n";
print GENERATEDFILE "    if( h != INVALID_HANDLE_VALUE )\n";
print GENERATEDFILE "      XFreeSectionByHandle( h );\n";
print GENERATEDFILE "\n";
print GENERATEDFILE "  }\n";
print GENERATEDFILE "  return TRUE;\n";
print GENERATEDFILE "}\n\n";
print GENERATEDFILE "\n//-------------------------------------------------------------\n";
print GENERATEDFILE "//	UnloadDriverDataSections\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "BOOL UnloadDriverDataSections( void )\n";
print GENERATEDFILE "{\n";
print GENERATEDFILE "  std::map< std::string, std::string >::iterator i = g_nameToSectionMap.begin();\n";
print GENERATEDFILE "  for( ; i != g_nameToSectionMap.end(); ++i )\n";
print GENERATEDFILE "  {\n";
print GENERATEDFILE "    std::string sectionName;\n";
print GENERATEDFILE "    sectionName = DATA_PREFIX;\n";
print GENERATEDFILE "    sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "    HANDLE h = XGetSectionHandle( sectionName.c_str() );\n";
print GENERATEDFILE "    if( h != INVALID_HANDLE_VALUE )\n";
print GENERATEDFILE "      XFreeSectionByHandle( h );\n";
print GENERATEDFILE "\n";
print GENERATEDFILE "    sectionName = CONST_PREFIX;\n";
print GENERATEDFILE "    sectionName += (*i).second.c_str();\n";
print GENERATEDFILE "    h = XGetSectionHandle( sectionName.c_str() );\n";
print GENERATEDFILE "    if( h != INVALID_HANDLE_VALUE )\n";
print GENERATEDFILE "      XFreeSectionByHandle( h );\n";
print GENERATEDFILE "  }\n";
print GENERATEDFILE "  return TRUE;\n";
print GENERATEDFILE "}\n\n";
print GENERATEDFILE "\n//-------------------------------------------------------------\n";
print GENERATEDFILE "//	RegisterDriverSectionNames\n";
print GENERATEDFILE "//-------------------------------------------------------------\n";
print GENERATEDFILE "void RegisterDriverSectionNames( void )\n";
print GENERATEDFILE "{\n";


	# Create the CPUSections.cpp file
open( CPUFILE, ">./MAMEoX/sources/CPUSections.cpp" );
print CPUFILE "/**\n";
print CPUFILE "  * \\file      CPUSections.cpp\n";
print CPUFILE "  * \\brief     Registration of CPU files for creation and usage of XBOX\n";
print CPUFILE "  *             loadable sections\n";
print CPUFILE "  *\n";
print CPUFILE "  * \\note      This file is autogenerated via Sectionize.pl DO NOT EDIT!\n";
print CPUFILE "  */\n\n";
print CPUFILE "//= I N C L U D E S ====================================================\n";
print CPUFILE "#include <Xtl.h>\n";
print CPUFILE "#include <stdio.h>\n";
print CPUFILE "#include <map>\n";
print CPUFILE "#include <string>\n";
print CPUFILE "#include \"MAMEoX.h\"\n";
print CPUFILE "#include \"DebugLogger.h\"\n";
print CPUFILE "extern \"C\" {\n";
print CPUFILE "#include \"osd_cpu.h\"\n";
print CPUFILE "}\n";
print CPUFILE "//= D E F I N E S ======================================================\n";
print CPUFILE "#define DATA_PREFIX      \"".DATA_PREFIX."\"\n";
print CPUFILE "#define CODE_PREFIX      \"".CODE_PREFIX."\"\n";
print CPUFILE "#define BSS_PREFIX       \"".BSS_PREFIX."\"\n";
print CPUFILE "#define CONST_PREFIX     \"".CONST_PREFIX."\"\n";
print CPUFILE "\n";
print CPUFILE "//= G L O B A L = V A R S ==============================================\n";
print CPUFILE "static std::map< std::string, std::string >  g_nameToSectionMap;\n";
print CPUFILE "//= F U N C T I O N S ==================================================\n";
print CPUFILE "\n#ifdef _DEBUG\n";
print CPUFILE "//-------------------------------------------------------------\n";
print CPUFILE "//	CheckCPUSectionRAM\n";
print CPUFILE "//-------------------------------------------------------------\n";
print CPUFILE "void CheckCPUSectionRAM( void )\n";
print CPUFILE "{\n";
print CPUFILE "  std::map< std::string, std::string >::iterator i = g_nameToSectionMap.begin();\n";
print CPUFILE "  for( ; i != g_nameToSectionMap.end(); ++i )\n";
print CPUFILE "  {\n";
print CPUFILE "    std::string sectionName;\n";
print CPUFILE "    sectionName = CODE_PREFIX;\n";
print CPUFILE "    sectionName += (*i).second.c_str();\n";
print CPUFILE "    HANDLE h = XGetSectionHandle( sectionName.c_str() );\n";
print CPUFILE "    if( h != INVALID_HANDLE_VALUE )\n";
print CPUFILE "    {\n";
print CPUFILE "      UINT32 sz = XGetSectionSize( h );\n";
print CPUFILE "      PRINTMSG( T_INFO, \"CPU %s [CODE]: %lu\", (*i).first.c_str(), sz );\n";
print CPUFILE "    }\n";
print CPUFILE "    else\n";
print CPUFILE "      PRINTMSG( T_ERROR, \"Invalid section %s for file %s!\", (*i).second.c_str(), (*i).first.c_str() );\n";
print CPUFILE "\n";
print CPUFILE "    sectionName = DATA_PREFIX;\n";
print CPUFILE "    sectionName += (*i).second.c_str();\n";
print CPUFILE "    h = XGetSectionHandle( sectionName.c_str() );\n";
print CPUFILE "    if( h != INVALID_HANDLE_VALUE )\n";
print CPUFILE "    {\n";
print CPUFILE "      UINT32 sz = XGetSectionSize( h );\n";
print CPUFILE "      PRINTMSG( T_INFO, \"CPU %s [DATA]: %lu\", (*i).first.c_str(), sz );\n";
print CPUFILE "    }\n";
print CPUFILE "    else\n";
print CPUFILE "      PRINTMSG( T_ERROR, \"Invalid section %s for file %s!\", (*i).second.c_str(), (*i).first.c_str() );\n";
print CPUFILE "\n";
print CPUFILE "    sectionName = BSS_PREFIX;\n";
print CPUFILE "    sectionName += (*i).second.c_str();\n";
print CPUFILE "    h = XGetSectionHandle( sectionName.c_str() );\n";
print CPUFILE "    if( h != INVALID_HANDLE_VALUE )\n";
print CPUFILE "    {\n";
print CPUFILE "      UINT32 sz = XGetSectionSize( h );\n";
print CPUFILE "      PRINTMSG( T_INFO, \"CPU %s [BSS]: %lu\", (*i).first.c_str(), sz );\n";
print CPUFILE "    }\n";
print CPUFILE "    else\n";
print CPUFILE "    {\n";
print CPUFILE "      PRINTMSG( T_ERROR, \"Invalid section %s for file %s!\", (*i).second.c_str(), (*i).first.c_str() );\n";
print CPUFILE "    }\n";
print CPUFILE "\n";
print CPUFILE "    sectionName = CONST_PREFIX;\n";
print CPUFILE "    sectionName += (*i).second.c_str();\n";
print CPUFILE "    h = XGetSectionHandle( sectionName.c_str() );\n";
print CPUFILE "    if( h != INVALID_HANDLE_VALUE )\n";
print CPUFILE "    {\n";
print CPUFILE "      UINT32 sz = XGetSectionSize( h );\n";
print CPUFILE "      PRINTMSG( T_INFO, \"CPU %s [CONST]: %lu\", (*i).first.c_str(), sz );\n";
print CPUFILE "    }\n";
print CPUFILE "    else\n";
print CPUFILE "      PRINTMSG( T_ERROR, \"Invalid section %s for file %s!\", (*i).second.c_str(), (*i).first.c_str() );\n";
print CPUFILE "\n";
print CPUFILE "    DebugLoggerFlush();\n";
print CPUFILE "  }\n";
print CPUFILE "}\n";
print CPUFILE "#endif\n\n";
print CPUFILE "\n//-------------------------------------------------------------\n";
print CPUFILE "//	RegisterSectionName\n";
print CPUFILE "//-------------------------------------------------------------\n";
print CPUFILE "static void RegisterSectionName( const char *CPUFileName, const char *DataSectionName )\n";
print CPUFILE "{\n";
print CPUFILE "    // Add the section name to the map\n";
print CPUFILE "  g_nameToSectionMap[ CPUFileName ] = DataSectionName;\n";
print CPUFILE "}\n\n";
print CPUFILE "\n//-------------------------------------------------------------\n";
print CPUFILE "//	LoadCPUSectionByName\n";
print CPUFILE "//-------------------------------------------------------------\n";
print CPUFILE "BOOL LoadCPUSectionByName( const char *CPUFileName )\n";
print CPUFILE "{\n";
print CPUFILE "  std::map< std::string, std::string >::iterator i = g_nameToSectionMap.find( CPUFileName );\n";
print CPUFILE "  if( i == g_nameToSectionMap.end() )\n";
print CPUFILE "    return FALSE;\n";
print CPUFILE "  std::string sectionName;\n";
print CPUFILE "  void *addr;\n";
print CPUFILE "  sectionName = DATA_PREFIX;\n";
print CPUFILE "  sectionName += (*i).second.c_str();\n";
print CPUFILE "  addr = XLoadSection( sectionName.c_str() );\n";
print CPUFILE "  if( !addr )\n";
print CPUFILE "  {\n";
print CPUFILE "    UINT32 lastErr = GetLastError();\n";
print CPUFILE "    PRINTMSG( T_ERROR, \"XLoadSection failed! 0x%X\\r\\n\", lastErr );\n";
print CPUFILE "    //osd_print_error( \"Failed to load section %s!\", sectionName.c_str() );\n";
print CPUFILE "    //return FALSE;\n";
print CPUFILE "  }\n";
print CPUFILE "\n";
print CPUFILE "  sectionName = CODE_PREFIX;\n";
print CPUFILE "  sectionName += (*i).second.c_str();\n";
print CPUFILE "  addr = XLoadSection( sectionName.c_str() );\n";
print CPUFILE "  if( !addr )\n";
print CPUFILE "  {\n";
print CPUFILE "    UINT32 lastErr = GetLastError();\n";
print CPUFILE "    PRINTMSG( T_ERROR, \"XLoadSection failed! 0x%X\\r\\n\", lastErr );\n";
print CPUFILE "    //osd_print_error( \"Failed to load section %s!\", sectionName.c_str() );\n";
print CPUFILE "    //return FALSE;\n";
print CPUFILE "  }\n";
print CPUFILE "\n";
print CPUFILE "  sectionName = BSS_PREFIX;\n";
print CPUFILE "  sectionName += (*i).second.c_str();\n";
print CPUFILE "  addr = XLoadSection( sectionName.c_str() );\n";
print CPUFILE "  if( !addr )\n";
print CPUFILE "  {\n";
print CPUFILE "    UINT32 lastErr = GetLastError();\n";
print CPUFILE "    PRINTMSG( T_ERROR, \"XLoadSection failed! 0x%X\\r\\n\", lastErr );\n";
print CPUFILE "    //osd_print_error( \"Failed to load section %s!\", sectionName.c_str() );\n";
print CPUFILE "    //return FALSE;\n";
print CPUFILE "  }\n";
print CPUFILE "\n";
print CPUFILE "  sectionName = CONST_PREFIX;\n";
print CPUFILE "  sectionName += (*i).second.c_str();\n";
print CPUFILE "  addr = XLoadSection( sectionName.c_str() );\n";
print CPUFILE "  if( !addr )\n";
print CPUFILE "  {\n";
print CPUFILE "    UINT32 lastErr = GetLastError();\n";
print CPUFILE "    PRINTMSG( T_ERROR, \"XLoadSection failed! 0x%X\\r\\n\", lastErr );\n";
print CPUFILE "    //osd_print_error( \"Failed to load section %s!\", sectionName.c_str() );\n";
print CPUFILE "    //return FALSE;\n";
print CPUFILE "  }\n";
print CPUFILE "  return TRUE;\n";
print CPUFILE "}\n\n";
print CPUFILE "\n//-------------------------------------------------------------\n";
print CPUFILE "//	UnloadCPUSectionByName\n";
print CPUFILE "//-------------------------------------------------------------\n";
print CPUFILE "BOOL UnloadCPUSectionByName( const char *CPUFileName )\n";
print CPUFILE "{\n";
print CPUFILE "  std::map< std::string, std::string >::iterator i = g_nameToSectionMap.find( CPUFileName );\n";
print CPUFILE "  if( i == g_nameToSectionMap.end() )\n";
print CPUFILE "    return FALSE;\n";
print CPUFILE "  BOOL dataRet, codeRet, bssRet, constRet;\n";
print CPUFILE "  std::string sectionName;\n";
print CPUFILE "  sectionName = DATA_PREFIX;\n";
print CPUFILE "  sectionName += (*i).second.c_str();\n";
print CPUFILE "  dataRet = XFreeSection( sectionName.c_str() );\n";
print CPUFILE "\n";
print CPUFILE "  sectionName = CODE_PREFIX;\n";
print CPUFILE "  sectionName += (*i).second.c_str();\n";
print CPUFILE "  codeRet = XFreeSection( sectionName.c_str() );\n";
print CPUFILE "\n";
print CPUFILE "  sectionName = BSS_PREFIX;\n";
print CPUFILE "  sectionName += (*i).second.c_str();\n";
print CPUFILE "  bssRet = XFreeSection( sectionName.c_str() );\n";
print CPUFILE "\n";
print CPUFILE "  sectionName = CONST_PREFIX;\n";
print CPUFILE "  sectionName += (*i).second.c_str();\n";
print CPUFILE "  constRet = XFreeSection( sectionName.c_str() );\n";
print CPUFILE "\n";
print CPUFILE "  return (dataRet && codeRet && bssRet && constRet);\n";
print CPUFILE "}\n\n";
print CPUFILE "\n//-------------------------------------------------------------\n";
print CPUFILE "//	LoadCPUDataSections\n";
print CPUFILE "//-------------------------------------------------------------\n";
print CPUFILE "BOOL LoadCPUDataSections( void )\n";
print CPUFILE "{\n";
print CPUFILE "  std::map< std::string, std::string >::iterator i = g_nameToSectionMap.begin();\n";
print CPUFILE "  for( ; i != g_nameToSectionMap.end(); ++i )\n";
print CPUFILE "  {\n";
print CPUFILE "    std::string sectionName;\n";
print CPUFILE "    sectionName = DATA_PREFIX;\n";
print CPUFILE "    sectionName += (*i).second.c_str();\n";
print CPUFILE "    if( !XLoadSection( sectionName.c_str() ) )\n";
print CPUFILE "    {\n";
print CPUFILE "      PRINTMSG( T_ERROR, \"Failed to load section %s!\", sectionName.c_str() );\n";
print CPUFILE "      //return FALSE;\n";
print CPUFILE "    }\n";
print CPUFILE "\n";
print CPUFILE "    sectionName = CONST_PREFIX;\n";
print CPUFILE "    sectionName += (*i).second.c_str();\n";
print CPUFILE "    if( !XLoadSection( sectionName.c_str() ) )\n";
print CPUFILE "    {\n";
print CPUFILE "      PRINTMSG( T_ERROR, \"Failed to load section %s!\", sectionName.c_str() );\n";
print CPUFILE "      //return FALSE;\n";
print CPUFILE "    }\n";
print CPUFILE "  }\n";
print CPUFILE "  return TRUE;\n";
print CPUFILE "}\n\n";
print CPUFILE "\n//-------------------------------------------------------------\n";
print CPUFILE "//	UnloadCPUNonDataSections\n";
print CPUFILE "//-------------------------------------------------------------\n";
print CPUFILE "BOOL UnloadCPUNonDataSections( void )\n";
print CPUFILE "{\n";
print CPUFILE "  std::map< std::string, std::string >::iterator i = g_nameToSectionMap.begin();\n";
print CPUFILE "  for( ; i != g_nameToSectionMap.end(); ++i )\n";
print CPUFILE "  {\n";
print CPUFILE "    std::string sectionName;\n";
print CPUFILE "    sectionName = CODE_PREFIX;\n";
print CPUFILE "    sectionName += (*i).second.c_str();\n";
print CPUFILE "    HANDLE h = XGetSectionHandle( sectionName.c_str() );\n";
print CPUFILE "    if( h != INVALID_HANDLE_VALUE )\n";
print CPUFILE "      XFreeSectionByHandle( h );\n";
print CPUFILE "\n";
print CPUFILE "    sectionName = BSS_PREFIX;\n";
print CPUFILE "    sectionName += (*i).second.c_str();\n";
print CPUFILE "    h = XGetSectionHandle( sectionName.c_str() );\n";
print CPUFILE "    if( h != INVALID_HANDLE_VALUE )\n";
print CPUFILE "      XFreeSectionByHandle( h );\n";
print CPUFILE "\n";
print CPUFILE "  }\n";
print CPUFILE "  return TRUE;\n";
print CPUFILE "}\n\n";
print CPUFILE "\n//-------------------------------------------------------------\n";
print CPUFILE "//	UnloadCPUDataSections\n";
print CPUFILE "//-------------------------------------------------------------\n";
print CPUFILE "BOOL UnloadCPUDataSections( void )\n";
print CPUFILE "{\n";
print CPUFILE "  std::map< std::string, std::string >::iterator i = g_nameToSectionMap.begin();\n";
print CPUFILE "  for( ; i != g_nameToSectionMap.end(); ++i )\n";
print CPUFILE "  {\n";
print CPUFILE "    std::string sectionName;\n";
print CPUFILE "    sectionName = DATA_PREFIX;\n";
print CPUFILE "    sectionName += (*i).second.c_str();\n";
print CPUFILE "    HANDLE h = XGetSectionHandle( sectionName.c_str() );\n";
print CPUFILE "    if( h != INVALID_HANDLE_VALUE )\n";
print CPUFILE "      XFreeSectionByHandle( h );\n";
print CPUFILE "\n";
print CPUFILE "    sectionName = CONST_PREFIX;\n";
print CPUFILE "    sectionName += (*i).second.c_str();\n";
print CPUFILE "    h = XGetSectionHandle( sectionName.c_str() );\n";
print CPUFILE "    if( h != INVALID_HANDLE_VALUE )\n";
print CPUFILE "      XFreeSectionByHandle( h );\n";
print CPUFILE "  }\n";
print CPUFILE "  return TRUE;\n";
print CPUFILE "}\n\n";
print CPUFILE "\n//-------------------------------------------------------------\n";
print CPUFILE "//	RegisterCPUSectionNames\n";
print CPUFILE "//-------------------------------------------------------------\n";
print CPUFILE "void RegisterCPUSectionNames( void )\n";
print CPUFILE "{\n";



# Auto generate an 8 character unique name for each file
local $autoNameNumber = 0;
local @newFILEs;

print "Sectionizing drivers, sound hardware, and video hardware...\n";

# Do two passes, one to find the last autoNameNumber, another to actually
# modify the files
print "Pass 1...\n";

foreach( @FILEs ) {
	chomp( $_ );

		# Skip the fake jrcrypt.c file
	if( !($_ =~ /.*jrcrypt\.c$/) ) {
		$DriverFileName = $_;
		$DriverName = $_;

			# Change the DriverName to what will be present in the actual MAME code
			# Drop the ./MAME/ portion
		$DriverName =~ /^\.\/MAME\/src\/drivers\/(.*\.c)$/;
		$DriverName = "src\\\\drivers\\\\$1";

		print PRELOADFILE "/NOPRELOAD:\"".CODE_PREFIX."$autoNameNumber\"\n";
		print PRELOADFILE "/NOPRELOAD:\"".BSS_PREFIX."$autoNameNumber\"\n";
		print DBGPRELOADFILE "/NOPRELOAD:\"".CODE_PREFIX."$autoNameNumber\"\n";
		print DBGPRELOADFILE "/NOPRELOAD:\"".BSS_PREFIX."$autoNameNumber\"\n";
#		print PRELOADFILE "/NOPRELOAD:\"".DATA_PREFIX."$autoNameNumber\"\n";
#		print PRELOADFILE "/NOPRELOAD:\"".CONST_PREFIX."$autoNameNumber\"\n";
		print GENERATEDFILE "  RegisterSectionName( \"$DriverName\", \"$autoNameNumber\" );\n";

		($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
		 $atime,$mtime,$ctime,$blksize,$blocks) = stat( $DriverFileName );

		open( FILE, "<$DriverFileName" ) || die "Failed to open file $DriverFileName!\n";
		sysread( FILE, $File, $size );
		close( FILE );

		if( ($File =~ /\#pragma code_seg/) ) {
				# this should only happen on the first pass
			$File =~ /\#pragma code_seg\(\"C(\d+)\"\)/;
			if( $1 >= $autoNameNumber ) {
				$autoNameNumber = $1 + 1;
			}		
		} else {
		   push @newFILEs, $DriverFileName;
		}
	}
}


# Second pass, write out the section headers
print "Pass 2...\n";
foreach( @newFILEs ) {
	chomp( $_ );

		# Skip the fake jrcrypt.c file
	if( !($_ =~ /.*jrcrypt\.c$/) ) {
		$DriverFileName = $_;
		$DriverName = $_;

			# Change the DriverName to what will be present in the actual MAME code
			# Drop the ./MAME/ portion
		$DriverName =~ /^\.\/MAME\/src\/drivers\/(.*\.c)$/;
		$DriverName = "src\\\\drivers\\\\$1";

		print PRELOADFILE "/NOPRELOAD:\"".CODE_PREFIX."$autoNameNumber\"\n";
		print PRELOADFILE "/NOPRELOAD:\"".BSS_PREFIX."$autoNameNumber\"\n";
		print DBGPRELOADFILE "/NOPRELOAD:\"".CODE_PREFIX."$autoNameNumber\"\n";
		print DBGPRELOADFILE "/NOPRELOAD:\"".BSS_PREFIX."$autoNameNumber\"\n";
#		print PRELOADFILE "/NOPRELOAD:\"".DATA_PREFIX."$autoNameNumber\"\n";
#		print PRELOADFILE "/NOPRELOAD:\"".CONST_PREFIX."$autoNameNumber\"\n";
		print GENERATEDFILE "  RegisterSectionName( \"$DriverName\", \"$autoNameNumber\" );\n";

		($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
		 $atime,$mtime,$ctime,$blksize,$blocks) = stat( $DriverFileName );

		open( FILE, "<$DriverFileName" ) || die "Failed to open file $DriverFileName!\n";
		sysread( FILE, $File, $size );
		close( FILE );

			# Write out the section header/footer
		WriteSectionData( $DriverFileName, $File, $autoNameNumber );

			# Also do the vidhdrw file, if one exists
		$VidHardwareName = $DriverFileName;
		$VidHardwareName =~ s/\/drivers\//\/vidhrdw\//;

		($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
		 $atime,$mtime,$ctime,$blksize,$blocks) = stat( $VidHardwareName );

		if( open( FILE, "<$VidHardwareName" ) ) {
			$File = "";
			sysread( FILE, $File, $size );
			close( FILE );

			if( !($File =~ /\#pragma code_seg/) ) {
				WriteSectionData( $VidHardwareName, $File, $autoNameNumber );
			}
		}

			# Also do the sndhrdw file, if one exists
		$SoundHardwareName = $DriverFileName;
		$SoundHardwareName =~ s/\/drivers\//\/sndhrdw\//;

		($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
		 $atime,$mtime,$ctime,$blksize,$blocks) = stat( $SoundHardwareName );

		if( open( FILE, "<$SoundHardwareName" ) ) {
			$File = "";
			sysread( FILE, $File, $size );
			close( FILE );

			if( !($File =~ /\#pragma code_seg/) ) {
				WriteSectionData( $SoundHardwareName, $File, $autoNameNumber );
			}
		}

		$autoNameNumber++;
	}
}
print GENERATEDFILE "}\n\n\n";
close( GENERATEDFILE );


print "Sectionizing CPU's...\n";

my @CPUDirs = `find ./MAME/src/cpu -path \'*/CVS\' -prune -o -type d -a -print`;

$autoNameNumber = 0;

# Do two passes, one to find the last autoNameNumber, another to actually
# modify the files
print "Pass 1...\n";

foreach( @CPUDirs ) {
	chomp( $_ );
	print "$_\n";
}



close( CPUFILE );
close( PRELOADFILE );
close( DBGPRELOADFILE );



#------------------------------------------------------------------------
#	WriteSectionData
#------------------------------------------------------------------------
sub WriteSectionData( $$$ ) {
	my $FileName = $_[0];
	my $File = $_[1];
	my $autoNameNumber = $_[2];
	my $DataSectionName = "\"D$autoNameNumber\"";
	my $CodeSectionName = "\"C$autoNameNumber\"";
	my $BSSSectionName = "\"B$autoNameNumber\"";
	my $ConstSectionName= "\"K$autoNameNumber\"";

	open( FILE, ">$FileName" ) || die "Could not open %s for output!\n";

		#open the segment
	my $SegLine = "#pragma code_seg($CodeSectionName)\n";
	syswrite( FILE, $SegLine, length($SegLine) );
	$SegLine = "#pragma bss_seg($BSSSectionName)\n";
	syswrite( FILE, $SegLine, length($SegLine) );
	$SegLine = "#pragma data_seg($DataSectionName)\n";
				syswrite( FILE, $SegLine, length($SegLine) );
	$SegLine = "#pragma const_seg($ConstSectionName)\n";
				syswrite( FILE, $SegLine, length($SegLine) );

		#write the old file data
	syswrite( FILE, $File, $size );

		#Close the segment
	$SegLine = "#pragma data_seg()\n";
	syswrite( FILE, $SegLine, length($SegLine) );
	$SegLine = "#pragma code_seg()\n";
	syswrite( FILE, $SegLine, length($SegLine) );
	$SegLine = "#pragma bss_seg()\n";
	syswrite( FILE, $SegLine, length($SegLine) );
	$SegLine = "#pragma const_seg()\n";
	syswrite( FILE, $SegLine, length($SegLine) );

	close( FILE );
}
